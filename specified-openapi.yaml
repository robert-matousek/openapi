openapi: 3.0.0
info:
  title: Specified API
  description: >-
    Transform standards documents into machine-readable requirements.
    
    ***
    
    ## API Reference
  
    The Specified API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts [form-encoded](https://en.wikipedia.org/wiki/POST_(HTTP)#Use_for_submitting_web_forms) request bodies, returns [JSON-encoded](http://www.json.org/) responses, and uses standard HTTP response codes, authentication, and verbs.

    ***

    ## API Authentication
    
    The Specified API uses [API keys](/docs/keys) to authenticate requests.
    Authentication to the API is performed via HTTP Basic Auth. Provide your APP ID and API key as the basic auth username value. You do not need to provide a password. All API requests must be made over HTTPS. Calls made over plain HTTP will fail or calls without authentication will fail.
      
      
      To request API keys [contact support](mailto:support@specified.ai).
      
      
  termsOfService: https://specified.ai/terms-of-service.html
  contact:
    name: Specified.ai
    url: https://specfied.ai
    email: support@specified.ai
  version: '1.0'
servers:
  - url: https://api.specified.ai/v1
    description: Main (production) server
  - url: https://staging-api.specified.ai
    description: Internal staging server for testing

paths:
  '/api/concepts/process':
    post:
      summary: "Process SKOS concepts"
      description: |
        This endpoint allows the processing of RDF data either from a provided URL or from an uploaded RDF file. 
        The RDF data should be in one of the supported formats: `xml`, `json`, or `turtle`. 
        The specified thesaurus URI will be used for processing. 
        The language parameter is used to specify the language for processing the concepts.
      operationId: processConcepts
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: "The URL of the RDF file to be processed (optional)."
                  example: "http://example.com/data.rdf"
                file:
                  type: string
                  format: binary
                  description: "The RDF file to be uploaded (optional)."
                rdf_format:
                  type: string
                  description: "The format of the RDF file. Allowed values: xml, json, turtle."
                  enum: [xml, json, turtle]
                  example: "turtle"
                uri:
                  type: string
                  minLength: 1
                  description: "The URI of the concept scheme being processed."
                  example: "http://example.com/scheme"
                language:
                  type: string
                  description: "The language of the text for processing the concepts."
                  example: "nl"
      responses:
        '200':
          description: "Successfully processed RDF data from the provided URL or uploaded file."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "A message confirming the successful processing of the RDF concepts."
                    example: "The RDF data was processed successfully."
        '400':
          description: "Bad Request. Either a URL or file must be provided, but not both."
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "Details about the error."
                    example: "Provide either a URL or upload a file, not both."
        '422':
          description: "Unprocessable Entity. Validation failed for the parameters."
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "Details about the error."
                    example: "Either a URL or an uploaded file must be provided."
        '500':
          description: "Internal Server Error. An unexpected error occurred while processing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "Details about the error."
                    example: "An unexpected error occurred while processing the RDF data."

  '/api/concepts/search':
    post:
      summary: "Find concepts in a text or a document"
      description: ""
      operationId: searchConcepts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchConceptsRequest'
      responses:
        '200':
          description: "The hits, non-hits and configuration."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchConceptsResponse'
        '400':
          description: "Invalid input provided. Either missing required fields or incorrect values."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message explaining the invalid input."
                    example: "Missing required fields or invalid URIs."
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message describing what went wrong."
                    example: "Error processing the text."
                    

  '/api/concepts/tag/text':
    post:
      summary: "Tag concepts in a text"
      description: "This endpoint processes a string of text and replaces concepts based on the provided thesaurus identifier (URI) and language code."
      operationId: tagText
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagTextRequest'
      responses:
        '200':
          description: "The modified text with applied tags."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagTextResponse'
        '400':
          description: "Invalid input provided. Either missing required fields or incorrect values."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message explaining the invalid input."
                    example: "Missing required fields or invalid URIs."
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message describing what went wrong."
                    example: "Error processing the text."

  '/api/concepts/tag/document':
    post:
      summary: "Tags concepts in a document"
      description: |
        This endpoint allows you to upload a file (e.g., HTML or TXT), specify concept scheme URIs, 
        and tag concepts within the document. Additional parameters allow fine-tuning the tagging process,
        such as restricting the tagging to the first occurrence of concepts, excluding certain URIs, and setting 
        the minimum length of concepts to tag.
      operationId: tagDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TagDocumentRequest'
      responses:
        '200':
          description: "The document was successfully tagged."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDocumentResponse'
        '400':
          description: "Invalid input provided, such as missing fields or unsupported file types."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message explaining the invalid input."
                    example: "Unsupported file format. Only HTML and TXT are supported."
        '500':
          description: "Internal server error during document processing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message describing the internal server error."
                    example: "Error processing the document."

  '/api/concepts/export':
    post:
      summary: Export a list of concepts to a document.
      description: Exports a list of concepts (each with a term and a URI) to a document in the specified format (CSV, HTML, or Word).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertConceptsRequest'
      responses:
        '200':
          description: The generated document in the requested format.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request parameters.
        '500':
          description: Internal server error.


  # '/qna/ask':
  #   post:
  #     summary: "Ask a question to the QnA system"
  #     description: |
  #       Sends a question to the QnA system and retrieves an answer. Optionally, the response can include hyperlinks to relevant concepts based on the `hyperlink_concepts` flag.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/QnARequest'
  #     responses:
  #       '200':
  #         description: "Response containing the answer to the question."
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/QnAResponse'
  #       '400':
  #         description: "Bad request, invalid input provided"
  #       '500':
  #         description: "Internal server error, QnA system failed"
  # '/requirements/extract':
  #   post:
  #     summary: "Extract requirements from written text"
  #     description: |
  #       This endpoint accepts a plain text input and extracts specific requirements from the text. It processes the input to identify requirements, returning a list of extracted requirements in the response.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/ExtractRequest'
  #     responses:
  #       '200':
  #         description: "A list of extracted requirements."
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ExtractRequirementResponse'
  #       '400':
  #         description: "Bad request, invalid input provided"
  #       '500':
  #         description: "Internal server error, extraction failed"
          
  # '/requirements/parse':
  #   post:
  #     summary: "Parse a written requirement into a graph"
  #     description: |
  #       Converts a textual requirement into a structured graph representation. This endpoint accepts plain text input describing a requirement and processes it to generate a JSON structure that represents the requirement as a graph. The graph includes conditions, systems, and performances.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/ParseRequirementRequest'
  #     responses:
  #       '200':
  #         description: "JSON structure generated successfully"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ParseRequirementResponse'
  #       '400':
  #         description: "Bad request, invalid input provided"
  #       '500':
  #         description: "Internal server error, conversion failed"  
          
components:
  schemas:
    SearchConceptsRequest:
      type: object
      properties:
        text:
          type: string
          description: "Plain text to analyze for concepts."
        document:
          type: string
          format: binary
          description: "A file to analyze for concepts."
        uris:
          type: array
          items:
            type: object
            properties:
              uri:
                type: string
                format: uri
                description: "The URI of the concept scheme."
              language:
                type: string
                description: "The language of the concept scheme."
            required:
              - uri
              - language
          description: "An array of dictionaries, where each dictionary contains the URI of the concept scheme and its language."
          example:
            - uri: "http://example.com/scheme1"
              language: "en"
            - uri: "http://example.com/scheme2"
              language: "nl"

      oneOf:
        - required: [text, uris]
        - required: [document, uris]
      description: "Input for searching concepts."
    
    SearchConceptsResponse:
      type: object
      properties:
        document_id:
          type: string
          description: An optional document identifier.
        hits:
          type: object
          additionalProperties:
            type: object
            properties:
              concepts:
                type: array
                items:
                  type: object
                  properties:
                    prefLabel:
                      type: string
                      description: Preferred label of the concept.
                    altLabel:
                      type: string
                      description: Alternate label for the concept, if available.
                    description:
                      type: string
                      description: Detailed description of the concept.
                    uri:
                      type: string
                      format: uri
                      description: The URI of the concept.
                    probability:
                      type: number
                      format: float
                      description: Probability score indicating relevance.
              count:
                type: integer
                description: Total number of concepts found in this category.
              relevance:
                type: number
                format: float
                description: Relevance score for this group of concepts.
              contexts:
                type: array
                items:
                  type: string
                description: Context sentences where the concepts were found.
        non_hits:
          type: object
          properties:
            top_k_ngrams:
              type: array
              items:
                type: object
                properties:
                  ngram:
                    type: string
                    description: The n-gram text.
                  frequency:
                    type: integer
                    description: Frequency of occurrence in the document.
                  tfidf_score:
                    type: number
                    format: float
                    description: TF-IDF score for the n-gram.
        config:
          type: object
          properties:
            document_id:
              type: string
              description: The ID of the processed document.
            thesauri_id:
              type: array
              items:
                type: string
              description: List of thesauri IDs used during processing.
            top_k:
              type: integer
              description: The number of top results considered.
    
        
    TagTextRequest:
      type: object
      properties:
        text:
          type: string
          description: "Input text."
          example: "The quick brown fox jumps over the lazy dog."
        hits: 
          type: object
          additionalProperties:
            type: string
            format: uri
          description: "A dictionary where the keys are terms and the values are their corresponding URIs in the concept scheme(s)."
          example: 
            menggranulaat: "http://example.com/uri-1"
            actieraam: "http://example.com/uri-2"
        first_only:
          type: boolean
          description: "If true, only the first matching concept will be used."
          example: true
        blacklist:
          type: array
          items:
            type: string
          description: "A list of tags or concepts to exclude from the results."
          example: ["http://example.com/exclude1", "http://example.com/exclude2"]
        min_length:
          type: integer
          description: "The minimum length of the matching text (in characters) to be tagged."
          example: 5
      required:
        - text
        - uris
        - language

    TagTextResponse:
      type: object
      properties:
        message:
          type: string
          description: "A message indicating the success of the operation."
          example: "Text tagged successfully."
        tagged_text:
          type: string
          description: "The text with applied tags."
          example: "This is the tagged text with concepts."

    TagDocumentRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: "The file to be uploaded for concept tagging (e.g., HTML or TXT document)."
        hits: 
          type: object
          additionalProperties:
            type: string
            format: uri
          description: "A dictionary where the keys are terms and the values are their corresponding URIs in the concept scheme(s)."
          example: 
            term A: "http://example.com/uri-1"
            term B: "http://example.com/uri-2" 
        first_only:
          type: boolean
          description: "Whether to tag only the first occurrence of each concept in the document."
          example: true
        blacklist:
          type: array
          items:
            type: string
          description: "A list of URIs that should be excluded from the tagging process."
          example: ["http://example.com/exclude1", "http://example.com/exclude2"]
        min_length:
          type: integer
          description: "The minimum length of a concept that should be tagged."
          example: 5

    TagDocumentResponse:
      type: object
      properties:
        message:
          type: string
          description: "A message indicating the success of the document tagging process."
          example: "Document tagged successfully."
        tagged_document_path:
          type: string
          description: "The path to the tagged document."
          example: "/path/to/tagged_document.html"
        errors:
          type: array
          items:
            type: string
          description: "A list of errors encountered during the document tagging process."
          example: ["Error processing the third page", "Invalid file format"]
        status:
          type: string
          description: "The overall status of the document tagging operation."
          example: "success"

    ConvertConceptsRequest:
      type: object
      properties:
        concepts:
          type: array
          items:
            type: object
            properties:
              term:
                type: string
                description: The term of the concept.
              uri:
                type: string
                format: uri
                description: The URI of the concept.
            required:
              - term
              - uri
          description: A list of concepts to convert into a document.
        format:
          type: string
          enum: [csv, html, word]
          description: The format of the output document.
      required:
        - concepts
        - format
      description: Input data for converting concepts to a document.

    # ExtractRequest:
    #   type: object
    #   properties:
    #     text:
    #       type: string
    #       description: "The written text from which to extract requirements."
    #       example: "The system shall allow users to reset their passwords securely."
    #     language:
    #       type: string
    #       description: "The language of the text (e.g., 'en', 'fr')."
    #       example: "en"

    # ExtractRequirementResponse:
    #   type: object
    #   properties:
    #     status:
    #       type: string
    #       description: "The status of the extraction operation."
    #       example: "success"
    #     requirements:
    #       type: array
    #       description: "A list of extracted requirements."
    #       items:
    #         type: string
    #         description: "A single requirement extracted from the text."
    #       example:
    #         - "The system shall allow users to reset their passwords securely."
    #         - "The system must support two-factor authentication."
    
    # ParseRequirementRequest:
    #   type: object
    #   properties:
    #     textchunk:
    #       type: string
    #       description: "The text to be converted to a JSON structure."
    #     language:
    #       type: string
    #       description: "The language of the text (e.g., 'en', 'fr', etc.)."
    #     flag_errors:
    #       type: boolean
    #       description: "Whether to flag errors encountered during conversion."
    #     format:
    #       type: string
    #       enum: ["json", "xml", "yaml"]
    #       description: "The format of the output."

    # ParseRequirementResponse:
    #   type: object
    #   description: "A JSON structure that represents the parsed requirement. To be disclosed."
    
    # QnARequest:
    #   type: object
    #   properties:
    #     question:
    #       type: string
    #       description: "The question to ask the Question and Answer (QnA) system."
    #       example: "Aan welke eisen moet schoon metselwerk voldoen?"
    #     language:
    #       type: string
    #       description: "The language of the question (e.g., 'en', 'fr')."
    #       example: "nl"
    #     hyperlink_concepts:
    #       type: boolean
    #       description: "Flag indicating whether to include hyperlinks for relevant concepts in the response."
    #       example: true

    # QnAResponse:
    #   type: object
    #   properties:
    #     status:
    #       type: string
    #       description: "The status of the QnA operation."
    #       example: "success"
    #     answer:
    #       type: string
    #       description: "The answer to the question, with optional hyperlinks to concepts."
    #     hyperlinks_included:
    #       type: boolean
    #       description: "Whether hyperlinks to relevant concepts were included in the answer."
    #       example: true          
              
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY
    appId:
      type: apiKey
      in: header
      name: X-APP-ID
security:
  - apiKey: []
    appId:  []