openapi: 3.0.0
info:
  title: Specified API
  description: >-
    Transform standards documents into machine-readable requirements.
    
    ***
    
    ## API Reference
  
    The Specified API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts [form-encoded](https://en.wikipedia.org/wiki/POST_(HTTP)#Use_for_submitting_web_forms) request bodies, returns [JSON-encoded](http://www.json.org/) responses, and uses standard HTTP response codes, authentication, and verbs.

    ***

    ## API Authentication
    
    The Specified API uses [API keys](/docs/keys) to authenticate requests.
    Authentication to the API is performed via HTTP Basic Auth. Provide your APP ID and API key as the basic auth username value. You do not need to provide a password. All API requests must be made over HTTPS. Calls made over plain HTTP will fail or calls without authentication will fail.
      
      
      To request API keys [contact support](mailto:support@specified.ai).
      
      
  termsOfService: https://specified.ai/terms-of-service.html
  contact:
    name: Specified.ai
    url: https://specfied.ai
    email: support@specified.ai
  version: '1.0'
servers:
  - url: https://api.specified.ai/v1
    description: Main (production) server
  - url: https://staging-api.specified.ai
    description: Internal staging server for testing

paths:

  '/requirements/extract':
    post:
      summary: "Extract requirements from written text"
      description: |
        This endpoint accepts a plain text input and extracts specific requirements from the text. It processes the input to identify requirements, returning a list of extracted requirements in the response.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtractRequest'
      responses:
        '200':
          description: "A list of extracted requirements."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractRequirementResponse'
        '400':
          description: "Bad request, invalid input provided"
        '500':
          description: "Internal server error, extraction failed"
          
  '/requirements/parse':
    post:
      summary: "Parse a written requirement into a graph"
      description: |
        Converts a textual requirement into a structured graph representation. This endpoint accepts plain text input describing a requirement and processes it to generate a JSON structure that represents the requirement as a graph. The graph includes conditions, systems, and performances.
      requestBody:
        required: true
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/ParseRequirementRequest'
      responses:
        '200':
          description: "JSON structure generated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseRequirementResponse'
        '400':
          description: "Bad request, invalid input provided"
        '500':
          description: "Internal server error, conversion failed"

  '/concepts/tag':
    post:
      summary: "Hyperlink to concepts in a SKOS thesaurus"
      description: "Takes a string of text, a thesaurus identifier (URI), and a language code, and tags concepts in the text with hyperlinks to the thesaurus."
      operationId: replaceHyperlinks
      requestBody:
        description: "Input text, thesaurus identifier, and language code"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagConceptsRequest'
      responses:
        '200':
          description: "The modified text with hyperlinks"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagConceptsResponse'
        '400':
          description: "Invalid input provided"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message explaining the invalid input."
                    example: "Invalid thesaurus URI or language code."
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message describing what went wrong."
                    example: "Error processing the text."

  '/concepts/process':
    get:
      summary: "Preprocess concepts in a SKOS thesaurus"
      description: "Fetches and processes RDF data from a given URL."
      parameters:
        - name: url
          in: query
          required: true
          schema:
            type: string
            format: uri
            description: "The URL of the RDF file."
            example: "http://example.com/data.rdf"
        - name: rdf_format
          in: query
          required: true
          schema:
            type: string
            pattern: "^(xml|json|turtle)$"
            description: "The format of the RDF file. Allowed values: xml, json, turtle."
            example: "turtle"
        - name: uri
          in: query
          required: true
          schema:
            type: string
            minLength: 1
            description: "The thesaurus identifier (URI)."
            example: "http://example.com/scheme"
      responses:
        '200':
          description: "Successful response indicating that the RDF data was processed."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "A message providing additional information about the processing result."
                    example: "The RDF data was processed successfully."
        '400':
          description: "Bad Request. The request was invalid or cannot be otherwise served."
        '404':
          description: "Not Found. The requested resource could not be found."
        '500':
          description: "Internal Server Error. A generic error occurred on the server."

  '/qna/ask':
    post:
      summary: "Ask a question to the QnA system"
      description: |
        Sends a question to the QnA system and retrieves an answer. Optionally, the response can include hyperlinks to relevant concepts based on the `hyperlink_concepts` flag.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QnARequest'
      responses:
        '200':
          description: "Response containing the answer to the question."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QnAResponse'
        '400':
          description: "Bad request, invalid input provided"
        '500':
          description: "Internal server error, QnA system failed"
          
components:
  schemas:
    ExtractRequest:
      type: object
      properties:
        text:
          type: string
          description: "The written text from which to extract requirements."
          example: "The system shall allow users to reset their passwords securely."
        language:
          type: string
          description: "The language of the text (e.g., 'en', 'fr')."
          example: "en"

    ExtractRequirementResponse:
      type: object
      properties:
        status:
          type: string
          description: "The status of the extraction operation."
          example: "success"
        requirements:
          type: array
          description: "A list of extracted requirements."
          items:
            type: string
            description: "A single requirement extracted from the text."
          example:
            - "The system shall allow users to reset their passwords securely."
            - "The system must support two-factor authentication."
    
    ParseRequirementRequest:
      type: object
      properties:
        textchunk:
          type: string
          description: "The text to be converted to a JSON structure."
        language:
          type: string
          description: "The language of the text (e.g., 'en', 'fr', etc.)."
        flag_errors:
          type: boolean
          description: "Whether to flag errors encountered during conversion."
        format:
          type: string
          enum: ["json", "xml", "yaml"]
          description: "The format of the output."

    ParseRequirementResponse:
      type: object
      description: "A JSON structure that represents the parsed requirement. To be disclosed."

    TagConceptsRequest:
      type: object
      properties:
        text:
          type: string
          description: "Input text."
          example: "The quick brown fox jumps over the lazy dog."
        uri:
          type: string
          description: "Identifier (URI) of the thesaurus."
        language:
          type: string
          description: "Language code to process the text (e.g., 'en' for English, 'nl' for Dutch)."      
      required:
        - text
        - uri
        - language

    TagConceptsResponse:
      type: object
      properties:
        linkedText:
          type: string
          example: '<a href="https://example.com/word/brown">brown</a> fox jumps over the <a href="https://example.com/word/dog">dog</a>.'
          
    QnARequest:
      type: object
      properties:
        question:
          type: string
          description: "The question to ask the Question and Answer (QnA) system."
          example: "Aan welke eisen moet schoon metselwerk voldoen?"
        language:
          type: string
          description: "The language of the question (e.g., 'en', 'fr')."
          example: "nl"
        hyperlink_concepts:
          type: boolean
          description: "Flag indicating whether to include hyperlinks for relevant concepts in the response."
          example: true

    QnAResponse:
      type: object
      properties:
        status:
          type: string
          description: "The status of the QnA operation."
          example: "success"
        answer:
          type: string
          description: "The answer to the question, with optional hyperlinks to concepts."
        hyperlinks_included:
          type: boolean
          description: "Whether hyperlinks to relevant concepts were included in the answer."
          example: true          
              
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY
    appId:
      type: apiKey
      in: header
      name: X-APP-ID
security:
  - apiKey: []
    appId:  []